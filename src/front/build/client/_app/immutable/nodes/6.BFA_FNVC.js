import{t as y,h as U,a as g}from"../chunks/tvbMF9Pj.js";import"../chunks/V6KxLFIZ.js";import{t as V,v as W,$ as X,c as r,s as i,b as d,m as P,r as a,h as c,w as H}from"../chunks/gUvyREcO.js";import{e as v,s as l}from"../chunks/wr67jiHF.js";import{i as Z}from"../chunks/DoNM67fw.js";import{e as tt,i as et}from"../chunks/Dg7488E7.js";import{t as at,f as rt}from"../chunks/DQyGuE4Y.js";import{i as ot}from"../chunks/DdSIFJQO.js";import{o as st}from"../chunks/WRe_eenc.js";var it=y('<p class="info-message"> </p>'),nt=y('<tr><td> </td><td> </td><td> </td><td> </td><td> </td><td class="actions"><button class="edit" title="Edit record"><i class="fas fa-pen"></i></button>  <button class="delete" title="Delete record"><i class="fas fa-times"></i></button></td></tr>'),dt=y('<div class="wrapper dash"><div class="container dash"><!> <div class="header"><h3>Education Data</h3> <div class="actions"><button class="green"><i class="fas fa-plus"></i> Add New Record</button> <button class="green"><i class="fas fa-sync-alt"></i> Reload Initial Data</button> <button class="red"><i class="fas fa-trash-alt"></i> Delete All</button></div></div> <div class="seeker"></div> <div class="table-container"><table><thead><tr><th>Autonomous Community</th><th>Year</th><th>Basic FP</th><th>Middle Grade</th><th>Higher Grade</th><th>Actions</th></tr></thead></table> <div class="scroll-body"><table><tbody></tbody></table></div></div></div></div>');function _t(G,M){V(M,!1);let u="/api/v1/education-data",h=P([]),o=P("");async function f(){try{const e=await fetch(u);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json();c(h,t)}catch(e){console.error("[GET] Error getting education data:",e)}}function O(){}async function j(){const e=`${u}/loadInitialData?reset=true`,t=`${u}/loadInitialData`;try{if(d(h).length>0){if(!confirm("There are existing records. Do you want to reload the initial data and reset everything?"))return;const n=await fetch(e);if(!n.ok)throw new Error(`Error ${n.status}`);c(o,"🔄 Initial data reloaded with reset.")}else{const s=await fetch(t);if(!s.ok)throw new Error(`Error ${s.status}`);c(o,"📥 Initial data loaded.")}await f()}catch(s){console.error("[LOAD INITIAL DATA] Error:",s),c(o,"❌ Error loading initial data.")}setTimeout(()=>{c(o,"")},3e3)}async function B(){if(confirm("Are you sure you want to delete all records?")){try{const t=await fetch(u,{method:"DELETE"});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);c(o,"✅ All records have been deleted."),await f()}catch(t){console.error("[DELETE] Error deleting records:",t),c(o,"❌ Error deleting records.")}setTimeout(()=>{c(o,"")},3e3)}}async function C(e,t){if(confirm(`Are you sure you want to delete the record for ${e} (${t})?`)){try{const n=await fetch(`${u}/${e}/${t}`,{method:"DELETE"});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);c(o,`🗑️ Record for ${e} (${t}) deleted successfully.`),await f()}catch(n){console.error("[DELETE ONE] Error deleting record:",n),c(o,"❌ Error deleting the record.")}setTimeout(()=>{c(o,"")},3e3)}}st(async()=>{f()}),ot();var m=dt();U(e=>{X.title="Dashboard - Education Data"});var D=r(m),$=r(D);{var F=e=>{var t=it(),s=r(t,!0);a(t),H(()=>l(s,d(o))),at(3,t,()=>rt,()=>({duration:300})),g(e,t)};Z($,e=>{d(o)&&e(F)})}var E=i($,2),T=i(r(E),2),A=r(T),k=i(A,2),Y=i(k,2);a(T),a(E);var x=i(E,4),I=i(r(x),2),R=r(I),L=r(R);tt(L,5,()=>d(h),et,(e,t)=>{var s=nt(),n=r(s),q=r(n,!0);a(n);var b=i(n),z=r(b,!0);a(b);var _=i(b),J=r(_,!0);a(_);var p=i(_),K=r(p,!0);a(p);var w=i(p),Q=r(w,!0);a(w);var N=i(w),S=i(r(N),2);a(N),a(s),H(()=>{l(q,d(t).autonomous_community),l(z,d(t).year),l(J,d(t).basic_fp),l(K,d(t).middle_grade),l(Q,d(t).higher_grade)}),v("click",S,()=>C(d(t).autonomous_community,d(t).year)),g(e,s)}),a(L),a(R),a(I),a(x),a(D),a(m),v("click",A,O),v("click",k,j),v("click",Y,B),g(G,m),W()}export{_t as component};
